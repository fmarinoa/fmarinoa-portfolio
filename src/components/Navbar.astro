---
import downloadIcon from '@/assets/icons/download.svg'
import CvModal from '@/components/CvModal.astro'

import type { NavItem } from '@/types'

const navItems: NavItem[] = [
  { href: '#about-me', label: 'Sobre mí' },
  { href: '#experience', label: 'Experiencia' },
  { href: '#projects', label: 'Proyectos' },
  { href: '#education', label: 'Educación' },
]
---

<nav
  class="fixed top-0 left-0 w-full bg-gray-900/90 backdrop-blur-md shadow z-50"
  role="navigation"
  aria-label="Main Navigation"
>
  <div class="max-w-4xl mx-auto px-4 py-3 flex justify-between items-center">
    <div class="flex items-center gap-4">
      <h1 class="text-lg md:text-xl font-bold text-white tracking-wide m-0">
        <a href="/" class="block w-full h-full"> Franco Mariño </a>
      </h1>
      <button
        id="cv-btn"
        class="flex items-center gap-2 px-3 py-1 bg-indigo-500 hover:bg-indigo-700 text-white rounded-lg transition-colors duration-200"
        title="Download CV"
      >
        <img src={downloadIcon.src} alt="Download CV" class="h-5 w-5" />
        <span class="hidden sm:inline">CV</span>
      </button>
    </div>

    <button
      id="menu-toggle"
      class="md:hidden flex flex-col justify-center items-center w-8 h-8 relative z-50"
      aria-label="Toggle menu"
    >
      <span
        class="hamburger-line block w-6 h-0.5 bg-white mb-1 transition-transform"
      ></span>
      <span
        class="hamburger-line block w-6 h-0.5 bg-white mb-1 transition-opacity"
      ></span>
      <span class="hamburger-line block w-6 h-0.5 bg-white transition-transform"
      ></span>
    </button>

    <ul
      id="nav-menu"
      class="flex-col md:flex-row gap-4 absolute md:static top-14 left-0 w-full md:w-auto bg-gray-800 md:bg-transparent transition-all duration-200 ease-in-out hidden md:flex md:items-center pb-2"
    >
      {
        navItems.map(item => (
          <li>
            <a
              href={item.href}
              aria-label={item.href.split('#').pop()}
              class="nav-link block py-2 px-4 md:p-0 transition-colors duration-200 text-white hover:text-indigo-300"
            >
              {item.label}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<CvModal triggerElementId="cv-btn" />

<script is:inline define:vars={{ sections: navItems.map(i => i.href) }}>
  // Variables de estado
  let menuOpen = false
  let currentSection = ''

  // Elementos del DOM
  const navMenu = document.getElementById('nav-menu')
  const hamburgerLines = document.querySelectorAll('.hamburger-line')
  const navLinks = document.querySelectorAll('.nav-link')

  const toggleMenuStyles = open => {
    navMenu?.classList.toggle('hidden', !open)
    navMenu?.classList.toggle('flex', open)
    navMenu?.classList.toggle('rounded-b-2xl', open)
    hamburgerLines[0]?.classList.toggle('rotate-45', open)
    hamburgerLines[0]?.classList.toggle('translate-y-1.5', open)
    hamburgerLines[1]?.classList.toggle('opacity-0', open)
    hamburgerLines[2]?.classList.toggle('-rotate-45', open)
    hamburgerLines[2]?.classList.toggle('-translate-y-1.5', open)
  }

  const removeMenuStyles = () => toggleMenuStyles(false)
  const addMenuStyles = () => toggleMenuStyles(true)

  // Toggle del menú móvil
  document.getElementById('menu-toggle').addEventListener('click', () => {
    menuOpen = !menuOpen

    if (menuOpen) {
      addMenuStyles()
    } else {
      removeMenuStyles()
    }
  })

  // Cerrar menú al hacer clic en un enlace
  navLinks.forEach(link => {
    link.addEventListener('click', () => {
      if (menuOpen) {
        menuOpen = false
        removeMenuStyles()
      }
    })
  })

  // Highlight de sección activa en scroll
  function updateActiveSection() {
    const scrollPos = window.scrollY + 100

    for (const sectionId of sections) {
      const section = document.querySelector(sectionId)
      const rect = section.getBoundingClientRect()
      const sectionTop = window.scrollY + rect.top
      const sectionBottom = sectionTop + rect.height

      if (scrollPos <= sectionTop && scrollPos > sectionBottom) return
      if (currentSection === sectionId) return

      currentSection = sectionId

      // Actualizar estilos de navegación
      navLinks.forEach(link => {
        if (link.getAttribute('href') === sectionId) {
          link.classList.add('text-indigo-400', 'font-semibold')
          link.classList.remove('text-white')
        } else {
          link.classList.remove('text-indigo-400', 'font-semibold')
          link.classList.add('text-white')
        }
      })
    }
  }

  // Event listener para scroll
  window.addEventListener('scroll', updateActiveSection)
</script>
