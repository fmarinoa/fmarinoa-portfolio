---
import { Image } from 'astro:assets'
import DownloadIcon from '@/assets/icons/download.svg'
import CvModal from '@/components/CvModal.astro'

import type { NavItem } from '@/types'

const navItems: NavItem[] = [
  { href: '#about-me', label: 'Sobre mí' },
  { href: '#experience', label: 'Experiencia' },
  { href: '#projects', label: 'Proyectos' },
  { href: '#education', label: 'Educación' },
]
---

<nav
  class="fixed top-0 left-0 w-full bg-gray-900/90 backdrop-blur-md shadow z-50"
  role="navigation"
  aria-label="Main Navigation"
>
  <div class="max-w-4xl mx-auto px-4 py-3 flex justify-between items-center">
    <div class="flex items-center gap-4">
      <h1 class="text-lg md:text-xl font-bold text-white tracking-wide m-0">
        <a href="/" class="block w-full h-full">Franco Mariño</a>
      </h1>
      <button
        id="cv-btn"
        class="flex items-center gap-2 px-3 py-1 bg-indigo-500 hover:bg-indigo-700 text-white rounded-lg transition-colors duration-200 hover:cursor-pointer"
        title="Download CV"
      >
        <Image src={DownloadIcon} alt="Download CV" class="h-5 w-5" />
        <span class="hidden sm:inline">CV</span>
      </button>
    </div>

    <button
      id="menu-toggle"
      class="md:hidden flex flex-col justify-center items-center w-8 h-8 relative z-50"
      aria-label="Toggle menu"
    >
      <span
        class="hamburger-line block w-6 h-0.5 bg-white mb-1 transition-transform"
      ></span>
      <span
        class="hamburger-line block w-6 h-0.5 bg-white mb-1 transition-opacity"
      ></span>
      <span class="hamburger-line block w-6 h-0.5 bg-white transition-transform"
      ></span>
    </button>

    <ul
      id="nav-menu"
      class="flex-col md:flex-row gap-6 absolute md:static top-14 left-0 w-full md:w-auto bg-gray-900/95 backdrop-blur-md md:bg-transparent md:backdrop-blur-none transition-all duration-300 ease-in-out hidden md:flex md:items-center py-2 px-4 md:p-0 z-50 border-t-2 border-indigo-500 md:border-none shadow-2xl md:shadow-none"
    >
      {
        navItems.map(item => (
          <li class="w-full md:w-auto">
            <a
              href={item.href}
              aria-label={item.href.split('#').pop()}
              class="nav-link block py-2 px-4 md:p-0 transition-all duration-300 text-white hover:text-indigo-300 text-lg md:text-base font-medium border-l-4 border-transparent hover:border-indigo-400 md:border-none hover:bg-gray-700/50 md:hover:bg-transparent rounded-r-lg md:rounded-none"
            >
              {item.label}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<div
  id="menu-overlay"
  class="fixed inset-0 bg-black/50 backdrop-blur-sm z-40 hidden"
>
</div>

<CvModal />

<style>
  @keyframes slideInLeft {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .nav-link {
    position: relative;
  }

  /* Ocultar enlaces inicialmente en móvil */
  @media (max-width: 767px) {
    .nav-link {
      opacity: 0;
      transform: translateX(-20px);
    }
  }

  .nav-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background: linear-gradient(90deg, #6366f1, #8b5cf6);
    transition: width 0.3s ease;
  }

  @media (max-width: 767px) {
    .nav-link::after {
      display: none;
    }
  }

  .nav-link:hover::after {
    width: 100%;
  }
</style>

<script is:inline define:vars={{ sections: navItems.map(i => i.href) }}>
  // Variables de estado
  let menuOpen = false
  let currentSection = ''

  // Elementos del DOM
  const navMenu = document.getElementById('nav-menu')
  const menuOverlay = document.getElementById('menu-overlay')
  const hamburgerLines = document.querySelectorAll('.hamburger-line')
  const navLinks = document.querySelectorAll('.nav-link')

  const toggleMenuStyles = open => {
    navMenu?.classList.toggle('hidden', !open)
    navMenu?.classList.toggle('flex', open)
    navMenu?.classList.toggle('rounded-b-2xl', open)
    menuOverlay?.classList.toggle('hidden', !open)

    // Animar hamburger
    hamburgerLines[0]?.classList.toggle('rotate-45', open)
    hamburgerLines[0]?.classList.toggle('translate-y-1.5', open)
    hamburgerLines[1]?.classList.toggle('opacity-0', open)
    hamburgerLines[2]?.classList.toggle('-rotate-45', open)
    hamburgerLines[2]?.classList.toggle('-translate-y-1.5', open)

    // Animar enlaces con delay escalonado
    if (open) {
      navLinks.forEach((link, index) => {
        // Asegurar que los enlaces estén ocultos antes de animar
        link.style.opacity = '0'
        link.style.transform = 'translateX(-40px)'
        setTimeout(() => {
          link.style.animation = `slideInLeft 1s ease-in-out forwards`
        }, index * 100)
      })
    } else {
      navLinks.forEach(link => {
        link.style.animation = ''
        // Resetear a estado oculto para móvil
        if (window.innerWidth <= 767) {
          link.style.opacity = '0'
          link.style.transform = 'translateX(-40px)'
        } else {
          link.style.opacity = ''
          link.style.transform = ''
        }
      })
    }
  }

  const removeMenuStyles = () => toggleMenuStyles(false)
  const addMenuStyles = () => toggleMenuStyles(true)

  // Función para resetear completamente el estado del menú
  const resetMenuState = () => {
    menuOpen = false
    navMenu?.classList.remove('rounded-b-2xl')
    menuOverlay?.classList.add('hidden')

    // Resetear hamburger
    hamburgerLines[0]?.classList.remove('rotate-45', 'translate-y-1.5')
    hamburgerLines[1]?.classList.remove('opacity-0')
    hamburgerLines[2]?.classList.remove('-rotate-45', '-translate-y-1.5')

    // Resetear enlaces
    navLinks.forEach(link => {
      link.style.animation = ''
      if (window.innerWidth <= 767) {
        link.style.opacity = '0'
        link.style.transform = 'translateX(-40px)'
      } else {
        link.style.opacity = ''
        link.style.transform = ''
      }
    })
  }

  // Toggle del menú móvil
  document.getElementById('menu-toggle').addEventListener('click', () => {
    menuOpen = !menuOpen

    if (menuOpen) {
      addMenuStyles()
    } else {
      removeMenuStyles()
    }
  })

  // Cerrar menú al hacer clic en un enlace
  navLinks.forEach(link => {
    link.addEventListener('click', () => {
      if (menuOpen) {
        menuOpen = false
        removeMenuStyles()
      }
    })
  })

  // Cerrar menú al hacer clic en el overlay
  menuOverlay?.addEventListener('click', () => {
    if (menuOpen) {
      menuOpen = false
      removeMenuStyles()
    }
  })

  const setLinkHighlight = (link, active) => {
    link.classList.toggle('text-indigo-400', active)
    link.classList.toggle('font-semibold', active)
    link.classList.toggle('text-white', !active)
  }

  // Highlight de sección activa en scroll
  function updateActiveSection() {
    const scrollPos = window.scrollY + 100

    for (const sectionId of sections) {
      const section = document.querySelector(sectionId)
      if (!section) continue
      const rect = section.getBoundingClientRect()
      const sectionTop = window.scrollY + rect.top
      const sectionBottom = sectionTop + rect.height

      if (scrollPos <= sectionTop || scrollPos > sectionBottom) continue

      if (currentSection === sectionId) break

      currentSection = sectionId
      navLinks.forEach(link => {
        if (link.getAttribute('href') === sectionId) {
          setLinkHighlight(link, true)
        } else {
          setLinkHighlight(link, false)
        }
      })
    }
  }

  // Event listener para scroll
  window.addEventListener('scroll', updateActiveSection)

  // Manejar cambios de tamaño de pantalla
  window.addEventListener('resize', () => {
    const isDesktop = window.innerWidth >= 768

    if (isDesktop) {
      // En desktop, asegurar que el menú sea visible y resetear estado
      navMenu?.classList.remove('hidden')
      navMenu?.classList.add('flex')
      resetMenuState()
    } else {
      // En móvil, ocultar menú si no está abierto
      if (!menuOpen) {
        navMenu?.classList.add('hidden')
        navMenu?.classList.remove('flex')
      }
    }
  })
</script>
