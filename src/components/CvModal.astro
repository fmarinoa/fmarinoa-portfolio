---
import Alert from './Alert.astro'

interface Props {
  triggerElementId: string
}
const { triggerElementId } = Astro.props
---

<div
  id="cv-modal"
  class="fixed inset-0 items-center justify-center bg-black/50 z-50 hidden"
>
  <div
    class="bg-gradient-to-br from-gray-800 to-gray-900 border border-indigo-400 transition-all duration-300 p-5 rounded-lg shadow-md max-w-xs text-center"
  >
    <h2 id="modal-title" class="sr-only">Confirmación de descarga</h2>
    <p id="modal-description" class="text-white font-medium mb-3">
      Será redirigido a la descarga de mi CV
    </p>
    <div class="flex justify-center gap-2">
      <button
        id="confirm-btn"
        class="px-4 py-2 rounded transition-colors bg-indigo-500 text-white hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed hover:cursor-pointer"
      >
        De acuerdo
      </button>
      <button
        id="cancel-btn"
        class="px-4 py-2 rounded transition-colors bg-gray-300 text-gray-800 hover:bg-gray-400 hover:cursor-pointer"
      >
        Cancelar
      </button>
    </div>
  </div>
</div>

<Alert />

<script is:inline define:vars={{ triggerElementId }}>
  const cvModal = document.getElementById('cv-modal')
  const confirmBtn = document.getElementById('confirm-btn')

  let isLoading = false

  function showAlert(message, state = 'success') {
    const alertElement = document.getElementById('alert')
    if (!alertElement) return
    alertElement.classList.remove('success', 'failed', 'hidden')
    alertElement.textContent = message
    alertElement.classList.add(state)
    setTimeout(() => alertElement.classList.add('hidden'), 5000)
  }

  function openModal() {
    cvModal?.classList.remove('hidden')
    cvModal?.classList.add('flex')
  }

  function closeModal() {
    cvModal?.classList.add('hidden')
    cvModal?.classList.remove('flex')
  }

  async function handleConfirm() {
    if (isLoading) return

    try {
      isLoading = true
      confirmBtn.disabled = true
      confirmBtn.textContent = 'Cargando...'

      const response = await fetch('/api/v1/cv-url.json')
      if (!response.ok) throw new Error(`HTTP ${response.status}`)

      const { cvUrl } = await response.json()
      closeModal()

      if (cvUrl) {
        window.open(cvUrl, '_blank', 'noopener,noreferrer')
        showAlert('¡Gracias por abrir mi CV!', 'success')
      } else {
        showAlert('No se pudo obtener la URL del CV', 'failed')
      }
    } catch (error) {
      closeModal()
      showAlert('Error al cargar el CV. Intenta de nuevo', 'failed')
    } finally {
      isLoading = false
      confirmBtn.disabled = false
      confirmBtn.textContent = 'De acuerdo'
    }
  }

  document.addEventListener('click', e => {
    if (e.target.closest(`#${triggerElementId}`)) openModal()
    else if (e.target.closest('#cancel-btn')) closeModal()
    else if (e.target === cvModal) closeModal()
    else if (e.target === confirmBtn) handleConfirm()
  })
</script>
