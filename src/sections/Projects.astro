---
import { Image } from 'astro:assets'
import GithubIcon from '@/assets/icons/github.svg'
import Link from '@/components/Link.astro'
import Section from '@/components/Section.astro'
import RightArrow from '@/assets/icons/arrow-right.svg'
import { getProjects } from '@/lib/content'
import type { Project } from '@/types'

const styleLink = 'bg-gray-700 px-2 py-1 rounded inline-flex items-center gap-1'
const projects = await getProjects()

// Crear array con Ãºltima carta al inicio + proyectos originales para efecto infinito
const carouselProjects = [projects[projects.length - 1], ...projects]
---

<Section sectionId="projects" title="Proyectos personales">
  <div class="relative w-full h-[520px] overflow-hidden">
    <div
      class="hidden md:block absolute top-0 right-20 md:right-24 w-20 md:w-24 h-full bg-gradient-to-l from-gray-900 via-gray-900/40 to-transparent z-5 pointer-events-none"
    >
    </div>

    <button
      id="next-btn"
      class="absolute top-0 right-0 z-10 bg-gradient-to-r from-black via-black to-black text-white h-full w-12 md:w-24 transition flex items-center justify-center text-2xl hover:from-black/90 hover:via-black/95 hover:to-black rounded-l-xl md:rounded-l-none md:rounded-r-xl"
      aria-label="Siguiente"
    >
      <RightArrow />
    </button>

    <div class="h-full max-w-full overflow-hidden mr-10">
      <div
        id="projects-carousel"
        class="flex gap-6 h-full transition-transform duration-700 ease-in-out pr-20"
      >
        {
          carouselProjects.map((project: Project) => (
            <article
              class="project-card group flex flex-col w-[300px] md:w-[450px] h-full shrink-0 bg-gradient-to-br from-gray-800 to-gray-900 
            rounded-xl shadow-xl border border-gray-700 hover:border-indigo-400 hover:shadow-2xl 
            p-6 transition-all duration-300 whitespace-normal"
            >
              {project.urls.image && (
                <div class="aspect-video w-full mb-4 rounded-lg overflow-hidden">
                  <Image
                    src={project.urls.image}
                    alt={project.title}
                    width={300}
                    height={169}
                    class="w-full h-full object-cover"
                    loading="lazy"
                  />
                </div>
              )}

              <h3 class="text-xl font-bold text-white mb-2 tracking-tight group-hover:text-indigo-400 transition-colors">
                {project.title}
              </h3>
              <p class="text-sm text-white mb-4">{project.description}</p>

              <div class="flex flex-wrap gap-2 mb-4">
                {project.technologies.map(tech => (
                  <span class="bt-tech px-2 py-1 rounded text-xs font-medium">
                    {tech}
                  </span>
                ))}
              </div>

              <div class="flex justify-end w-full text-sm mt-auto">
                {project.urls.demo && (
                  <Link
                    href={project.urls.demo}
                    className={`${styleLink} mr-2`}
                  >
                    ðŸ›œ Demo
                  </Link>
                )}
                {project.urls.github && (
                  <Link href={project.urls.github} className={styleLink}>
                    <Image
                      src={GithubIcon}
                      alt="GitHub"
                      width={48}
                      height={48}
                      format="webp"
                      class="size-5"
                    />
                    CÃ³digo
                  </Link>
                )}
              </div>
            </article>
          ))
        }
      </div>
    </div>
  </div>
</Section>

<style>
  .bt-tech {
    color: hsl(var(--primary));
    background-color: hsl(var(--primary) / 0.1);
  }

  article {
    border-color: rgb(55, 65, 81);
  }

  article:hover {
    border-color: rgb(129, 140, 248);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  article:hover h3 {
    color: rgb(129, 140, 248);
  }

  /* Deja que se asome el siguiente card */
  #projects-carousel {
    will-change: transform;
  }
</style>

<script>
  const carousel = document.getElementById('projects-carousel')
  const cards = carousel?.querySelectorAll('.project-card')
  const nextBtn = document.getElementById('next-btn')

  if (!carousel || !cards || !nextBtn) {
    throw new Error('Carousel elements not found')
  }

  let currentIndex = 1 // Empezar en la primera carta real (despuÃ©s de la duplicada)
  let autoSlide: ReturnType<typeof setTimeout>
  let isTransitioning = false

  const totalCards = cards.length
  const originalProjectsCount = totalCards - 1 // NÃºmero de proyectos originales
  const autoSlideInterval = 15 * 1000 // 15 seconds
  let remainingTime = autoSlideInterval
  let lastTime = Date.now()

  const getCardWidth = () => {
    const firstCard = cards[0] as HTMLElement
    return firstCard?.offsetWidth ? firstCard.offsetWidth + 24 : 0
  }

  const updateCarousel = (animate = true) => {
    const cardWidth = getCardWidth()
    carousel.style.transition = animate ? 'transform 0.7s ease-in-out' : 'none'
    carousel.style.transform = `translateX(-${currentIndex * cardWidth}px)`
  }

  const nextSlide = () => {
    if (isTransitioning) return

    isTransitioning = true
    currentIndex++
    updateCarousel()

    setTimeout(() => {
      if (currentIndex >= originalProjectsCount) {
        currentIndex = 0
        updateCarousel(false)
      }
      isTransitioning = false
    }, 700)
  }

  const startAutoSlide = () => {
    lastTime = Date.now()
    autoSlide = setTimeout(() => {
      nextSlide()
      remainingTime = autoSlideInterval
      startAutoSlide()
    }, remainingTime)
  }

  const pauseAutoSlide = () => {
    clearTimeout(autoSlide)
    remainingTime = Math.max(1000, remainingTime - (Date.now() - lastTime))
  }

  const resumeAutoSlide = () => {
    if (remainingTime <= 0) remainingTime = autoSlideInterval
    startAutoSlide()
  }

  const restartAutoSlide = () => {
    clearTimeout(autoSlide)
    remainingTime = autoSlideInterval
    startAutoSlide()
  }

  nextBtn.addEventListener('click', () => {
    nextSlide()
    restartAutoSlide()
  })

  carousel.addEventListener('mouseenter', pauseAutoSlide)
  carousel.addEventListener('mouseleave', resumeAutoSlide)
  window.addEventListener('resize', () => updateCarousel(false))

  // Posicionar el carrusel en la primera carta real al inicio
  updateCarousel(false)
  startAutoSlide()
</script>
